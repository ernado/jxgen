// Code generated by jxgen, DO NOT EDIT.

package example

import (
	"context"
	"fmt"
	"sort"
	"strings"

	"github.com/ernado/jxgen"
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// No-op definition for keeping imports.
var (
	_ = jxgen.Decoder(nil)
	_ = jx.Decode
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
)

// Ensuring interfaces in compile-time for Struct.
var (
	_ jxgen.Encoder = &Struct{}
	_ jxgen.Decoder = &Struct{}
)

// EncodeJSON implements jxgen.Encoder interface for Struct.
func (s *Struct) EncodeJSON(e *jx.Encoder) error {
	{
		e.Field("name", func(e *jx.Encoder) {
			e.StrEscape(s.Name)
		})
	}
	{
		e.Field("value", func(e *jx.Encoder) {
			e.Int(s.Value)
		})
	}
	return nil
}

func (s *Struct) WriteJSON(w *jx.Writer) {
	{
		w.FieldStart("name")
		w.StrEscape(s.Name)
	}
	{
		w.Comma()
		w.FieldStart("value")
		w.Int(s.Value)
	}
}

// DecodeJSON implements jxgen.Encoder interface for Struct.
func (s *Struct) DecodeJSON(d *jx.Decoder) error {
	return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
		switch string(key) {
		case "name":
			v, err := d.Str()
			if err != nil {
				return errors.Wrap(err, "decode field Name (name)")
			}
			s.Name = v
			return nil
		case "value":
			v, err := d.Int()
			if err != nil {
				return errors.Wrap(err, "decode field Value (value)")
			}
			s.Value = v
			return nil
		default:
			return nil
		}
	})
	return nil
}

// Ensuring interfaces in compile-time for Second.
var (
	_ jxgen.Encoder = &Second{}
	_ jxgen.Decoder = &Second{}
)

// EncodeJSON implements jxgen.Encoder interface for Second.
func (s *Second) EncodeJSON(e *jx.Encoder) error {
	{
		e.Field("kekus", func(e *jx.Encoder) {
			e.StrEscape(s.Kekus)
		})
	}
	return nil
}

func (s *Second) WriteJSON(w *jx.Writer) {
	{
		w.FieldStart("kekus")
		w.StrEscape(s.Kekus)
	}
}

// DecodeJSON implements jxgen.Encoder interface for Second.
func (s *Second) DecodeJSON(d *jx.Decoder) error {
	return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
		switch string(key) {
		case "kekus":
			v, err := d.Str()
			if err != nil {
				return errors.Wrap(err, "decode field Kekus (kekus)")
			}
			s.Kekus = v
			return nil
		default:
			return nil
		}
	})
	return nil
}
